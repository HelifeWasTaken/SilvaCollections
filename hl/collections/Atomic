#pragma once

#include <mutex>
#include <list>
#include <hl/collections/Meta>

namespace hl
{
namespace silva
{
namespace collections
{
namespace atomic
{

template<class T>
using AtomicResult = std::pair<std::unique_lock<std::mutex>, T&>;

template<class T>
using AtomicResultPtr = std::pair<std::unique_lock<std::mutex>, T*>;

// Using an iterator is not considered atomic and may cause a deadlock or be quite
// unsafe or slow if not used properly.
// semi_atomic is a just made up term to signify that the iterator is atomic only
// in some cases and not all.
template<typename IteratorType>
class semi_atomic_unsafe_iterator_
{
public:
    using base_iterator_t = IteratorType;

private:
    base_iterator_t m_iterator;
    std::mutex& m_mutex;

public:
    semi_atomic_unsafe_iterator_(base_iterator_t iterator, std::mutex& mutex)
        : m_iterator(iterator), m_mutex(mutex)
    {
    }

    ~semi_atomic_unsafe_iterator_() = default;

    AtomicResult<T> operator*()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return *m_iterator;
    }

    // disallow direct access to the pointer so that the mutex is always locked
    T* operator->() = delete; 

    iterator_& operator++()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        ++m_iterator;
        return *this;
    }

    iterator_ operator++(int)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        iterator temp = *this;
        ++m_iterator;
        return temp;
    }

    iterator_& operator--()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        --m_iterator;
        return *this;
    }

    iterator_ operator--(int)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        iterator temp = *this;
        --m_iterator;
        return temp;
    }

    bool operator==(const iterator& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator == other.m_iterator;
    }

    bool operator!=(const iterator& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator != other.m_iterator;
    }

    base_iterator_t non_atomic_iterator() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator;
    }

    base_iterator_t non_atomic_iterator_unsafe() const
    {
        return m_iterator;
    }
};


// en.cppreference.com/w/cpp/container/list
template<class T, class Allocator = std::allocator<T>>
class List : public meta::NonCopyable, public meta::NonMovable
{
public:
    using base_type_t = std::list<T, Allocator>;

private:
    base_type_t m_list;
    mutable std::mutex m_mutex;

public:
    // iterator
    using iterator = semi_atomic_unsafe_iterator_<base_type_t::iterator>;
    using const_iterator = semi_atomic_unsafe_iterator_<base_type_t::const_iterator>;

    // Member functions
    List() = default;
    ~List() = default;

    void assign(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.assign(count, value);
    }

    // Element Access

    AtomicResult<T> front()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.front());
    }

    const AtomicResult<T> front() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.front());
    }

    AtomicResult<T> back()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.back());
    }

    const AtomicResult<T> back() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.back());
    }


    iterator begin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_list.begin(), m_mutex);
    }

    const_iterator begin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.begin(), m_mutex);
    }

    const_iterator cbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.cbegin(), m_mutex);
    }

    iterator end()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_list.end(), m_mutex);
    }

    const_iterator end() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.end(), m_mutex);
    }

    const_iterator cend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.cend(), m_mutex);
    }

    bool empty() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.empty();
    }

    size_t size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.size();
    }

    size_t max_size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.max_size();
    }

    // Modifiers

    void clear()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.clear();
    }

    void insert(iterator pos, const T& value)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.insert(pos.non_atomic_iterator_unsafe(), value);
    }

    void insert(iterator pos, T&& value)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.insert(pos.non_atomic_iterator_unsafe(), std::move(value));
    }

    template<class... Args>
    void emplace(iterator pos, Args&&... args)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.emplace(pos.non_atomic_iterator_unsafe(), std::forward<Args>(args)...);
    }

    void erase(iterator pos)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.erase(pos.non_atomic_iterator_unsafe());
    }

    void erase(iterator first, iterator last)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.erase(first.non_atomic_iterator_unsafe(), last.non_atomic_iterator_unsafe());
    }

    void push_front(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(value);
    }

    void push_front(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(std::move(value));
    }

    void push_back(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_back(value);
    }

    void push_back(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_back(std::move(value));
    }

    template<class... Args>
    void emplace_back(Args&&... args)
    {
        emplace(end(), std::forward<Args>(args)...);
    }

    void pop_back()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.pop_back();
    }

    void push_front(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(value);
    }

    void push_front(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(std::move(value));
    }

    void pop_front()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.pop_front();
    }

    void resize(size_t count)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.resize(count);
    }

    void resize(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.resize(count, value);
    }

    void swap(AtomicList& other)
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        m_list.swap(other.m_list);
    }

    bool operator==(const AtomicList& other) const
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        return m_list == other.m_list;
    }

    bool operator!=(const AtomicList& other) const
    {
        return !(*this == other);
    }
};

template<class T, class Allocator>
class Vector : public meta::NonCopyable, public meta::NonMovable
{
public:
    using base_type_t = std::vector<T, Allocator>;
    using size_type = typename base_type_t::size_type;

private:
    base_type_t m_vector;
    mutable std::mutex m_mutex;

public:
    using iterator = semi_atomic_unsafe_iterator_<base_type_t::iterator>;
    using const_interator = semi_atomic_unsafe_iterator_<base_type_t::const_iterator>;

    // Member functions
    Vector() = default;
    ~Vector() = default;

    void assign(size_type count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.assign(count, value);
    }

    // Element Access

    AtomicResult<T> at(size_type pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.at(pos));
    }

    const AtomicResult<T> at(size_type pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.at(pos));
    }

    AtomicResult<T> operator[](size_type pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector[pos]);
    }

    const AtomicResult<T> operator[](size_type pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector[pos]);
    }

    AtomicResult<T> front()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.front());
    }

    const AtomicResult<T> front() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.front());
    }

    AtomicResult<T> back()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.back());
    }

    const AtomicResult<T> back() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.back());
    }

    AtomicResultPtr<T> data()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.data());
    }

    const AtomicResultPtr<T> data() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.data());
    }

    iterator begin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.begin(), m_mutex);
    }

    const_iterator begin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.begin(), m_mutex);
    }

    const_iterator cbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.cbegin(), m_mutex);
    }

    iterator end()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.end(), m_mutex);
    }

    const_iterator end() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.end(), m_mutex);
    }

    const_iterator cend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.cend(), m_mutex);
    }

    bool empty() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.empty();
    }

    size_type size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.size();
    }

    size_type max_size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.max_size();
    }

    void reserve(size_type new_cap)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.reserve(new_cap);
    }

    size_type capacity() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.capacity();
    }

    void shrink_to_fit()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.shrink_to_fit();
    }

    // Modifiers

    void clear()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.clear();
    }

    iterator insert(iterator pos, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.insert(pos.non_atomic_iterator_unsafe(), value), m_mutex);
    }

    iterator insert(iterator pos, T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.insert(pos.non_atomic_iterator_unsafe(), std::move(value)), m_mutex);
    }

    template<class... Args>
    iterator emplace(iterator pos, Args&&... args)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.emplace(pos.non_atomic_iterator_unsafe(), std::forward<Args>(args)...), m_mutex);
    }

    iterator erase(iterator pos)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.erase(pos.non_atomic_iterator_unsafe()), m_mutex);
    }

    iterator erase(iterator first, iterator last)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.erase(first.non_atomic_iterator_unsafe(), last.non_atomic_iterator_unsafe()), m_mutex);
    }

    void push_back(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.push_back(value);
    }

    void push_back(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.push_back(std::move(value));
    }

    template<class... Args>
    void emplace_back(Args&&... args)
    {
        emplace(end(), std::forward<Args>(args)...);
    }

    void pop_back()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.pop_back();
    }

    void resize(size_type count)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.resize(count);
    }

    void resize(size_type count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.resize(count, value);
    }

    void swap(Vector& other)
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        m_vector.swap(other.m_vector);
    }

    bool operator==(const Vector& other) const
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        return m_vector == other.m_vector;
    }

    bool operator!=(const Vector& other) const
    {
        return !(*this == other);
    }
};

}
}
}
}

namespace std
{

template<class T, class Allocator>
void swap(hl::silva::collections::atomic::List<T, Allocator>& lhs, hl::silva::collections::atomic::List<T, Allocator>& rhs)
{
    lhs.swap(rhs);
}

template<class T, class Allocator>
void swap(hl::silva::collections::atomic::Vector<T, Allocator>& lhs, hl::silva::collections::atomic::Vector<T, Allocator>& rhs)
{
    lhs.swap(rhs);
}

}