/**
 * hl/silva/collections/atomic/Queue
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */
#pragma once

#include <hl/silva/collections/atomic/DeQueue>

namespace hl
{
namespace silva
{
namespace collections
{
namespace atomic
{

template<class T, class Allocator = std::allocator<T>>
class Queue : public DeQueue<T, Allocator>
{
private:
    using DeQueue<T, Allocator>::assign;
    using DeQueue<T, Allocator>::at;
    using DeQueue<T, Allocator>::operator[];
    using DeQueue<T, Allocator>::begin;
    using DeQueue<T, Allocator>::cbegin;
    using DeQueue<T, Allocator>::end;
    using DeQueue<T, Allocator>::cend;
    using DeQueue<T, Allocator>::rbegin;
    using DeQueue<T, Allocator>::crbegin;
    using DeQueue<T, Allocator>::rend;
    using DeQueue<T, Allocator>::crend;
    using DeQueue<T, Allocator>::max_size;
    using DeQueue<T, Allocator>::clear;
    using DeQueue<T, Allocator>::insert;
    using DeQueue<T, Allocator>::erase;
    using DeQueue<T, Allocator>::pop_back;
    using DeQueue<T, Allocator>::push_front;
    using DeQueue<T, Allocator>::resize;

public:
    AtomicResult<T> front()
    {
        return DeQueue<T, Allocator>::front();
    }

    AtomicResult<T> back()
    {
        return DeQueue<T, Allocator>::back();
    }

    bool empty() const
    {
        return DeQueue<T, Allocator>::empty();
    }

    size_t size() const
    {
        return DeQueue<T, Allocator>::size();
    }

    void push(const T& value)
    {
        DeQueue<T, Allocator>::push_back(value);
    }

    void push(T&& value)
    {
        DeQueue<T, Allocator>::push_back(std::move(value));
    }

    template<class... Args>
    void emplace(Args&&... args)
    {
        DeQueue<T, Allocator>::emplace_back(std::forward<Args>(args)...);
    }

    void pop()
    {
        DeQueue<T, Allocator>::pop_front();
    }

    void swap(Queue& other)
    {
        DeQueue<T, Allocator>::swap(other);
    }

    Queue() = default;
    virtual ~Queue() override = default;

    // Extend the base class with the following functions
    bool poll(T& value)
    {
        std::lock_guard<std::mutex> lock(this->m_mutex);
        if (empty())
        {
            return false;
        }
        value = std::move(front());
        pop();
        return true;
    }
};

}
}
}
}
