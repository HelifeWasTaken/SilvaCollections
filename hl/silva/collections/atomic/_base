/**
 * hl/silva/collections/atomic/_base
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */

#pragma once

#include <shared_mutex>
#include <mutex>
#include <memory>
#include <functional>
#include <hl/silva/collections/Meta>

namespace hl
{
namespace silva
{
namespace collections
{
namespace atomic
{

template<class T>
using DefaultAllocator = std::allocator<T>;

// Requires shared mutex for multiple readers/iterators
using Mutex = std::shared_mutex;

using AtomicResultLock = std::unique_lock<Mutex>;
using AtomicResultIterLock = std::shared_lock<Mutex>; 

using LockGuard = std::lock_guard<Mutex>;

using AdoptLock = std::adopt_lock_t;

template<class T>
struct AtomicResult
{
    AtomicResultLock lock;
    std::reference_wrapper<T> value;

    AtomicResult(AtomicResultLock &&lock, T& value)
        : lock(std::move(lock)), value(value)
    {
    }

    ~AtomicResult() = default;

    AtomicResult(const AtomicResult& other) = default;
    AtomicResult& operator=(const AtomicResult& other) = default;
    AtomicResult(AtomicResult&& other) = default;
    AtomicResult& operator=(AtomicResult&& other) = default;

    inline T& operator*()
    {
        return value.get();
    }

    inline const T& operator*() const
    {
        return value.get();
    }
};

template<class T>
using AtomicResultPtr = AtomicResult<T*>;

// Using an iterator is not considered completely atomic and may cause a deadlock or be quite
// unsafe or slow if not used properly.
// semi_atomic is a just made up term to signify that the iterator is atomic only
// in some cases and not all.
// The iterator will automatically lock and adopt the lock of the mutex
// Moving the iterator will result in copying the internal iterator and moving the lock
template<class T, typename IteratorType>
class semi_atomic_unsafe_iterator_
{
public:
    using base_iterator_t = IteratorType;

private:
    base_iterator_t m_iterator;
    AtomicResultIterLock m_lock;

public:
    semi_atomic_unsafe_iterator_(base_iterator_t iterator, AtomicResultIterLock&& lock)
        : m_iterator(iterator), m_lock(std::move(lock))
    {}

    ~semi_atomic_unsafe_iterator_() = default;

    semi_atomic_unsafe_iterator_(const semi_atomic_unsafe_iterator_& other) = default;

    semi_atomic_unsafe_iterator_(semi_atomic_unsafe_iterator_&& other)
        : m_iterator(other.m_iterator), m_lock(std::move(other.m_lock))
    {}

    semi_atomic_unsafe_iterator_& operator=(const semi_atomic_unsafe_iterator_& other) = default;

    semi_atomic_unsafe_iterator_& operator=(semi_atomic_unsafe_iterator_&& other)
    {
        m_iterator = other.m_iterator;
        m_lock = std::move(other.m_lock);
        return *this;
    }

    T& operator*()
    {
        return *m_iterator;
    }

    // disallow direct access to the pointer so that the mutex is always locked
    T* operator->() = delete; 

    semi_atomic_unsafe_iterator_& operator++()
    {
        ++m_iterator;
        return *this;
    }

    semi_atomic_unsafe_iterator_ operator++(int)
    {
        semi_atomic_unsafe_iterator_ temp = *this;
        ++m_iterator;
        return temp;
    }

    semi_atomic_unsafe_iterator_& operator--()
    {
        --m_iterator;
        return *this;
    }

    semi_atomic_unsafe_iterator_ operator--(int)
    {
        semi_atomic_unsafe_iterator_ temp = *this;
        --m_iterator;
        return temp;
    }

    bool operator==(const semi_atomic_unsafe_iterator_& other) const
    {
        return m_iterator == other.m_iterator;
    }

    bool operator!=(const semi_atomic_unsafe_iterator_& other) const
    {
        return !(*this == other);
    }

    bool operator<(const semi_atomic_unsafe_iterator_& other) const
    {
        return m_iterator < other.m_iterator;
    }

    bool operator>(const semi_atomic_unsafe_iterator_& other) const
    {
        return m_iterator > other.m_iterator;
    }

    bool operator<=(const semi_atomic_unsafe_iterator_& other) const
    {
        return m_iterator <= other.m_iterator;
    }

    bool operator>=(const semi_atomic_unsafe_iterator_& other) const
    {
        return m_iterator >= other.m_iterator;
    }

    bool operator==(const base_iterator_t& other) const
    {
        return m_iterator == other;
    }

    bool operator!=(const base_iterator_t& other) const
    {
        return !(*this == other);
    }

    bool operator<(const base_iterator_t& other) const
    {
        return m_iterator < other;
    }

    bool operator>(const base_iterator_t& other) const
    {
        return m_iterator > other;
    }

    bool operator<=(const base_iterator_t& other) const
    {
        return m_iterator <= other;
    }

    bool operator>=(const base_iterator_t& other) const
    {
        return m_iterator >= other;
    }

    semi_atomic_unsafe_iterator_& operator=(const base_iterator_t& other)
    {
        m_iterator = other;
        return *this;
    }

    base_iterator_t non_atomic_iterator() const
    {
        return m_iterator;
    }

    base_iterator_t non_atomic_iterator_unsafe() const
    {
        return m_iterator;
    }

    AtomicResultIterLock& lock()
    {
        return m_lock;
    }
};

}
}
}
}

namespace std
{
    template<typename ...LockArgs>
    void unlock(LockArgs&&... args)
    {
        (std::forward<LockArgs>(args).unlock(), ...);
    }
}