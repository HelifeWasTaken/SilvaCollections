/**
 * hl/silva/collections/Threads
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */

#pragma once

#include <mutex>
#include <vector>
#include <list>
#include <deque>
#include <memory>

#include <hl/silva/collections/Meta>

namespace hl
{
namespace silva
{
namespace collections
{
namespace atomic
{

template<class T>
using AtomicResult = std::pair<std::unique_lock<std::mutex>, T&>;

template<class T>
using AtomicResultPtr = std::pair<std::unique_lock<std::mutex>, T*>;

// Using an iterator is not considered atomic and may cause a deadlock or be quite
// unsafe or slow if not used properly.
// semi_atomic is a just made up term to signify that the iterator is atomic only
// in some cases and not all.
template<class T, typename IteratorType>
class semi_atomic_unsafe_iterator_
{
public:
    using base_iterator_t = IteratorType;

private:
    base_iterator_t m_iterator;
    std::mutex& m_mutex;

public:
    semi_atomic_unsafe_iterator_(base_iterator_t iterator, std::mutex& mutex)
        : m_iterator(iterator), m_mutex(mutex)
    {
    }

    ~semi_atomic_unsafe_iterator_() = default;

    AtomicResult<T> operator*()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return *m_iterator;
    }

    // disallow direct access to the pointer so that the mutex is always locked
    T* operator->() = delete; 

    semi_atomic_unsafe_iterator_& operator++()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        ++m_iterator;
        return *this;
    }

    semi_atomic_unsafe_iterator_ operator++(int)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        semi_atomic_unsafe_iterator_ temp = *this;
        ++m_iterator;
        return temp;
    }

    semi_atomic_unsafe_iterator_& operator--()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        --m_iterator;
        return *this;
    }

    semi_atomic_unsafe_iterator_ operator--(int)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        semi_atomic_unsafe_iterator_ temp = *this;
        --m_iterator;
        return temp;
    }

    bool operator==(const semi_atomic_unsafe_iterator_& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator == other.m_iterator;
    }

    bool operator!=(const semi_atomic_unsafe_iterator_& other) const
    {
        return !(*this == other);
    }

    bool operator<(const semi_atomic_unsafe_iterator_& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator < other.m_iterator;
    }

    bool operator>(const semi_atomic_unsafe_iterator_& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator > other.m_iterator;
    }

    bool operator<=(const semi_atomic_unsafe_iterator_& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator <= other.m_iterator;
    }

    bool operator>=(const semi_atomic_unsafe_iterator_& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator >= other.m_iterator;
    }

    bool operator==(const base_iterator_t& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator == other;
    }

    bool operator!=(const base_iterator_t& other) const
    {
        return !(*this == other);
    }

    bool operator<(const base_iterator_t& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator < other;
    }

    bool operator>(const base_iterator_t& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator > other;
    }

    bool operator<=(const base_iterator_t& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator <= other;
    }

    bool operator>=(const base_iterator_t& other) const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator >= other;
    }

    semi_atomic_unsafe_iterator_& operator=(const base_iterator_t& other)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_iterator = other;
        return *this;
    }

    base_iterator_t non_atomic_iterator() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_iterator;
    }

    base_iterator_t non_atomic_iterator_unsafe() const
    {
        return m_iterator;
    }
};

// en.cppreference.com/w/cpp/container/list
template<class T, class Allocator = std::allocator<T>>
class List : public meta::NonCopyMoveable
{
public:
    using base_type_t = std::list<T, Allocator>;

private:
    base_type_t m_list;
    mutable std::mutex m_mutex;

public:
    // iterator
    using iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::iterator>;
    using const_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_iterator>;
    using reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::reverse_iterator>;
    using const_reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_reverse_iterator>;

    // Member functions
    List() = default;
    virtual ~List() override = default;

    void assign(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.assign(count, value);
    }

    // Element Access

    AtomicResult<T> front()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.front());
    }

    const AtomicResult<T> front() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.front());
    }

    AtomicResult<T> back()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.back());
    }

    const AtomicResult<T> back() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_list.back());
    }

    iterator begin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_list.begin(), m_mutex);
    }

    const_iterator begin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.begin(), m_mutex);
    }

    const_iterator cbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.cbegin(), m_mutex);
    }

    iterator end()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_list.end(), m_mutex);
    }

    const_iterator end() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.end(), m_mutex);
    }

    const_iterator cend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_list.cend(), m_mutex);
    }

    reverse_iterator rbegin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_list.rbegin(), m_mutex);
    }

    const_reverse_iterator rbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_list.rbegin(), m_mutex);
    }

    const_reverse_iterator crbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_list.crbegin(), m_mutex);
    }

    reverse_iterator rend()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_list.rend(), m_mutex);
    }

    const_reverse_iterator rend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_list.rend(), m_mutex);
    }

    const_reverse_iterator crend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_list.crend(), m_mutex);
    }

    bool empty() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.empty();
    }

    size_t size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.size();
    }

    size_t max_size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_list.max_size();
    }

    // Modifiers

    void clear()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.clear();
    }

    void insert(iterator pos, const T& value)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.insert(pos.non_atomic_iterator_unsafe(), value);
    }

    void insert(iterator pos, T&& value)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.insert(pos.non_atomic_iterator_unsafe(), std::move(value));
    }

    template<class... Args>
    void emplace(iterator pos, Args&&... args)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.emplace(pos.non_atomic_iterator_unsafe(), std::forward<Args>(args)...);
    }

    void erase(iterator pos)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.erase(pos.non_atomic_iterator_unsafe());
    }

    void erase(iterator first, iterator last)
    {
        // use unsafe to avoid deadlock
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.erase(first.non_atomic_iterator_unsafe(), last.non_atomic_iterator_unsafe());
    }

    void push_back(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_back(value);
    }

    void push_back(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_back(std::move(value));
    }

    template<class... Args>
    void emplace_back(Args&&... args)
    {
        emplace(end(), std::forward<Args>(args)...);
    }

    void pop_back()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.pop_back();
    }

    void push_front(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(value);
    }

    void push_front(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.push_front(std::move(value));
    }

    template<class... Args>
    void emplace_front(Args&&... args)
    {
        emplace(begin(), std::forward<Args>(args)...);
    }

    void pop_front()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.pop_front();
    }

    void resize(size_t count)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.resize(count);
    }

    void resize(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_list.resize(count, value);
    }

    void swap(List& other)
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        m_list.swap(other.m_list);
    }

    bool operator==(const List& other) const
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        return m_list == other.m_list;
    }

    bool operator!=(const List& other) const
    {
        return !(*this == other);
    }
};

template<class T, class Allocator = std::allocator<T>>
class Vector : public meta::NonCopyMoveable
{
public:
    using base_type_t = std::vector<T, Allocator>;
    using size_type = typename base_type_t::size_type;

private:
    base_type_t m_vector;
    mutable std::mutex m_mutex;

public:
    using iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::iterator>;
    using const_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_iterator>;
    using reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::reverse_iterator>;
    using const_reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_reverse_iterator>;

    // Member functions
    Vector() = default;
    virtual ~Vector() override = default;

    void assign(size_type count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.assign(count, value);
    }

    // Element Access

    AtomicResult<T> at(size_type pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.at(pos));
    }

    const AtomicResult<T> at(size_type pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.at(pos));
    }

    AtomicResult<T> operator[](size_type pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector[pos]);
    }

    const AtomicResult<T> operator[](size_type pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector[pos]);
    }

    AtomicResult<T> front()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.front());
    }

    const AtomicResult<T> front() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.front());
    }

    AtomicResult<T> back()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.back());
    }

    const AtomicResult<T> back() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.back());
    }

    AtomicResultPtr<T> data()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.data());
    }

    const AtomicResultPtr<T> data() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_vector.data());
    }

    iterator begin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.begin(), m_mutex);
    }

    const_iterator begin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.begin(), m_mutex);
    }

    const_iterator cbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.cbegin(), m_mutex);
    }

    iterator end()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.end(), m_mutex);
    }

    const_iterator end() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.end(), m_mutex);
    }

    const_iterator cend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_vector.cend(), m_mutex);
    }

    reverse_iterator rbegin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_vector.rbegin(), m_mutex);
    }

    const_reverse_iterator rbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_vector.rbegin(), m_mutex);
    }

    const_reverse_iterator crbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_vector.crbegin(), m_mutex);
    }

    reverse_iterator rend()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_vector.rend(), m_mutex);
    }

    const_reverse_iterator rend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_vector.rend(), m_mutex);
    }

    const_reverse_iterator crend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_vector.crend(), m_mutex);
    }

    // Capacity

    bool empty() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.empty();
    }

    size_type size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.size();
    }

    size_type max_size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.max_size();
    }

    void reserve(size_type new_cap)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.reserve(new_cap);
    }

    size_type capacity() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_vector.capacity();
    }

    // TODO
    // void shrink_to_fit()

    // Modifiers

    void clear()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.clear();
    }

    iterator insert(iterator pos, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.insert(pos.non_atomic_iterator_unsafe(), value), m_mutex);
    }

    iterator insert(iterator pos, T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.insert(pos.non_atomic_iterator_unsafe(), std::move(value)), m_mutex);
    }

    template<class... Args>
    iterator emplace(iterator pos, Args&&... args)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.emplace(pos.non_atomic_iterator_unsafe(), std::forward<Args>(args)...), m_mutex);
    }

    iterator erase(iterator pos)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.erase(pos.non_atomic_iterator_unsafe()), m_mutex);
    }

    iterator erase(iterator first, iterator last)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_vector.erase(first.non_atomic_iterator_unsafe(), last.non_atomic_iterator_unsafe()), m_mutex);
    }

    void push_back(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.push_back(value);
    }

    void push_back(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.push_back(std::move(value));
    }

    template<class... Args>
    void emplace_back(Args&&... args)
    {
        emplace(end(), std::forward<Args>(args)...);
    }

    void pop_back()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.pop_back();
    }

    void resize(size_type count)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.resize(count);
    }

    void resize(size_type count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_vector.resize(count, value);
    }

    void swap(Vector& other)
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        m_vector.swap(other.m_vector);
    }

    bool operator==(const Vector& other) const
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        return m_vector == other.m_vector;
    }

    bool operator!=(const Vector& other) const
    {
        return !(*this == other);
    }
};

template<class T, class Allocator = std::allocator<T>>
class DeQueue : public meta::NonCopyMoveable
{
public:
    using base_type_t = std::deque<T, Allocator>;

private:
    base_type_t m_queue;

protected:
    mutable std::mutex m_mutex;

public:
    using iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::iterator>;
    using const_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_iterator>;
    using reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::reverse_iterator>;
    using const_reverse_iterator = semi_atomic_unsafe_iterator_<T, typename base_type_t::const_reverse_iterator>;

    // Member functions
    DeQueue() = default;
    virtual ~DeQueue() override = default;

    void assign(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.assign(count, value);
    }

    // Element Access

    AtomicResult<T> at(size_t pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.at(pos));
    }

    const AtomicResult<T> at(size_t pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.at(pos));
    }

    AtomicResult<T> operator[](size_t pos)
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue[pos]);
    }

    const AtomicResult<T> operator[](size_t pos) const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue[pos]);
    }

    AtomicResult<T> front()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.front());
    }

    const AtomicResult<T> front() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.front());
    }

    AtomicResult<T> back()
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.back());
    }

    const AtomicResult<T> back() const
    {
        std::unique_lock<std::mutex> lock(m_mutex);
        return std::make_pair(std::move(lock), m_queue.back());
    }

    // Iterators
    iterator begin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_queue.begin(), m_mutex);
    }

    const_iterator begin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_queue.begin(), m_mutex);
    }

    const_iterator cbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_queue.cbegin(), m_mutex);
    }

    iterator end()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return iterator(m_queue.end(), m_mutex);
    }

    const_iterator end() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_queue.end(), m_mutex);
    }

    const_iterator cend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_iterator(m_queue.cend(), m_mutex);
    }

    reverse_iterator rbegin()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_queue.rbegin(), m_mutex);
    }

    const_reverse_iterator rbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_queue.rbegin(), m_mutex);
    }

    const_reverse_iterator crbegin() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_queue.crbegin(), m_mutex);
    }

    reverse_iterator rend()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return reverse_iterator(m_queue.rend(), m_mutex);
    }

    const_reverse_iterator rend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_queue.rend(), m_mutex);
    }

    const_reverse_iterator crend() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return const_reverse_iterator(m_queue.crend(), m_mutex);
    }

    // Capacity

    bool empty() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_queue.empty();
    }

    size_t size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_queue.size();
    }

    size_t max_size() const
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        return m_queue.max_size();
    }

    // void shrink_to_fit() T must meet requirements of MoveInsertable into *this C++11

    // Modifiers
    void clear()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.clear();
    }

    void insert(iterator pos, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.insert(pos.non_atomic_iterator_unsafe(), value);
    }

    void insert(iterator pos, T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.insert(pos.non_atomic_iterator_unsafe(), std::move(value));
    }

    template<class... Args>
    void emplace(iterator pos, Args&&... args)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.emplace(pos.non_atomic_iterator_unsafe(), std::forward<Args>(args)...);
    }

    void erase(iterator pos)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.erase(pos.non_atomic_iterator_unsafe());
    }

    void erase(iterator first, iterator last)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.erase(first.non_atomic_iterator_unsafe(), last.non_atomic_iterator_unsafe());
    }

    void push_back(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.push_back(value);
    }

    void push_back(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.push_back(std::move(value));
    }

    template<class... Args>
    void emplace_back(Args&&... args)
    {
        emplace(end(), std::forward<Args>(args)...);
    }

    void pop_back()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.pop_back();
    }

    void push_front(const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.push_front(value);
    }

    void push_front(T&& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.push_front(std::move(value));
    }

    void pop_front()
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.pop_front();
    }

    void resize(size_t count)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.resize(count);
    }

    void resize(size_t count, const T& value)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        m_queue.resize(count, value);
    }

    void swap(DeQueue& other)
    {
        std::lock(m_mutex, other.m_mutex);
        std::lock_guard<std::mutex> lock1(m_mutex, std::adopt_lock);
        std::lock_guard<std::mutex> lock2(other.m_mutex, std::adopt_lock);
        m_queue.swap(other.m_queue);
    }
};

template<class T, class Allocator = std::allocator<T>>
class Queue : public DeQueue<T, Allocator>
{
private:
    using DeQueue<T, Allocator>::assign;
    using DeQueue<T, Allocator>::at;
    using DeQueue<T, Allocator>::operator[];
    using DeQueue<T, Allocator>::begin;
    using DeQueue<T, Allocator>::cbegin;
    using DeQueue<T, Allocator>::end;
    using DeQueue<T, Allocator>::cend;
    using DeQueue<T, Allocator>::rbegin;
    using DeQueue<T, Allocator>::crbegin;
    using DeQueue<T, Allocator>::rend;
    using DeQueue<T, Allocator>::crend;
    using DeQueue<T, Allocator>::max_size;
    using DeQueue<T, Allocator>::clear;
    using DeQueue<T, Allocator>::insert;
    using DeQueue<T, Allocator>::erase;
    using DeQueue<T, Allocator>::pop_back;
    using DeQueue<T, Allocator>::push_front;
    using DeQueue<T, Allocator>::resize;

public:
    AtomicResult<T> front()
    {
        return DeQueue<T, Allocator>::front();
    }

    AtomicResult<T> back()
    {
        return DeQueue<T, Allocator>::back();
    }

    bool empty() const
    {
        return DeQueue<T, Allocator>::empty();
    }

    size_t size() const
    {
        return DeQueue<T, Allocator>::size();
    }

    void push(const T& value)
    {
        DeQueue<T, Allocator>::push_back(value);
    }

    void push(T&& value)
    {
        DeQueue<T, Allocator>::push_back(std::move(value));
    }

    template<class... Args>
    void emplace(Args&&... args)
    {
        DeQueue<T, Allocator>::emplace_back(std::forward<Args>(args)...);
    }

    void pop()
    {
        DeQueue<T, Allocator>::pop_front();
    }

    void swap(Queue& other)
    {
        DeQueue<T, Allocator>::swap(other);
    }

    Queue() = default;
    virtual ~Queue() override = default;

    // Extend the base class with the following functions
    bool poll(T& value)
    {
        std::lock_guard<std::mutex> lock(this->m_mutex);
        if (empty())
        {
            return false;
        }
        value = std::move(front());
        pop();
        return true;
    }
};

}
}
}
}

namespace std
{

template<class T, class Allocator>
void swap(hl::silva::collections::atomic::List<T, Allocator>& lhs, hl::silva::collections::atomic::List<T, Allocator>& rhs)
{
    lhs.swap(rhs);
}

template<class T, class Allocator>
void swap(hl::silva::collections::atomic::Vector<T, Allocator>& lhs, hl::silva::collections::atomic::Vector<T, Allocator>& rhs)
{
    lhs.swap(rhs);
}

}