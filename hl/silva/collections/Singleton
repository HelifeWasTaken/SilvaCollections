/**
 * hl/silva/collections/Singleton
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * Made by: Mattis DALLEAU
 */

#pragma once

#include <hl/silva/collections/Meta>

namespace hl
{
namespace silva
{
namespace collections
{
namespace singletons
{

class _SingletonBase : public meta::NonCopyMoveable, public meta::NonConstructible
{
};

template <typename T>
class Static : public _SingletonBase
{
public:
    [[nodiscard]] static T& get() {
        static T instance = {};
        return instance;
    }
};

template <typename T>
class Dynamic : public _SingletonBase
{
private:
    [[nodiscard]] static T* manage_ptr(T* instance = nullptr, bool set = false) {
        static T *s_instance = nullptr;

        if (set) {
            if (s_instance) {
                delete s_instance;
            }
            s_instance = instance;
        }
        return s_instance;
    }

public:
    [[nodiscard]] static T& get() {
        return *manage_ptr();
    }

    static void destroy() {
        manage_ptr(nullptr, true);
    }

    static void set(T* instance) {
        manage_ptr(instance, true);
    }

    virtual ~Dynamic() override final {
        destroy();
    }
};

}
}
}
}
